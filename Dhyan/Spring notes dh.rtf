{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}}
\paperw11900\paperh16840\margl1440\margr1440\vieww20760\viewh14120\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b\fs36 \cf0 Spring Notes 
\f1\b0\fs24 \
To generate code - command + N\
Bean is th entity which connects the tables and the backend\
\
@
\f0\b Data
\f1\b0  - automatically generate all the necessary things for the variable declared\
@
\f0\b Builder
\f1\b0  - creates the obj to connect the class with db\
@
\f0\b NoArgsConstructor
\f1\b0  - creates constructor\
@
\f0\b AllArgsConstructor
\f1\b0  - creates constructor\
\pard\tx566\pardeftab720\partightenfactor0
\cf0 \expnd0\expndtw0\kerning0
\
@Configuration - used \
@ComponentScan - used to make the whole package to consider as bean\
@Component - used infront the classes\
@Bean - used infront of the methods\
\
1.Spring metadata in initialiser\
2.Group and package name same\
3.Artifact and name are same\
4.Add web spring dependency\
\
Jackson databind is used to convert the json data to java objects and vice versa\
Restcontroller doc : https://www.digitalocean.com/community/tutorials/spring-restcontroller\
\
Dependency injection - adding dependency - beans - scope - auto wired\
EJB\

\f0\b @Entity @Id
\f1\b0  needed to be specified for creation of table in db\
@
\f0\b Id
\f1\b0  - to create the primary key\
@SequenceGenerator is the object of the db, can be used as the primary key\
@GeneratedValue - is to auto generate the primary key even it is null\
\
Creating interfaces for the java classes which are connected to the db - dependency injection\
\
Jpa - used to interact with db (obj relational mapping)\
Dialect - specific implementation of sql lang that is used by the dbms\
\
@DeleteMapping - add the condition mentioned in the endpoint delete\
\
Enum is used to define the fixed set of constants that is not needed to change\
\
Controller fetching actions after defining in the respective repositories of the entities or tables\

\f0\b Request params and path variables 
\f1\b0 \
Request params is the one which is used to fetch all the data necessary with taking the condition from the query mentioned in the url (used for fetching data from 2 or more conditions) - query based\
PathVariable is the one which is used to fetch data which is needed for the user according to the condition given in the url - url data based\
\
\

\f0\b\fs36 JWT 
\fs24 - json web token to authorise - is only for authorization\

\f1\b0 jwt - to share info btw 2 entities (frontend and the server) \
For authorisation the jet token is stored into the client machine which could be used any where\
OAuth - used to describe the process of authorisation\
\
Spring authorisation : https://spring.io/projects/spring-authorization-server \
\
Spring jwt - https://www.tutorialspoint.com/spring_security/spring_security_with_jwt.htm\
\

\f0\b Payload
\f1\b0  - is the data or information that is within the message which contains the information whether it is sent or ,its the actual data that is sent or received\
3 types - registered, public an private\
\
jwt is mainly used to in the real time applications as if they want to jump bwt the servers, a single jet token is enough rather than relogging with the credentials   \
This jwt token\'92s secret key of the users will be stored in the server and will the authorised\
\

\f0\b Header, payload, verify signature
\f1\b0 \
The header and payload encryption should match the verify sign with an algorithm then only the token is valid\
\
\
How the security works\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf0 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}checks with the filter jwt\expnd0\expndtw0\kerning0
\
\pard\tx566\pardeftab720\partightenfactor0
\cf0 \

\f0\b Spring security
\f1\b0 \
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0\cf0 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
To add the spring security we need to implement the interface 
\f0\b user details
\f1\b0  \
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}make changes in the override functions which are generated while implementing\expnd0\expndtw0\kerning0
\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}create an enumerated Role interface for constantly defining the variables for authentication\
{\listtext	\uc0\u8226 	}create a package config inside the main package for configuration of JWT filters (doInternalFilter) and extend the class name to OncePerRequestFilter\
{\listtext	\uc0\u8226 	}the first is to check that the user or that class has the jwt token - need to use jwt service to extract the username or any fields \
{\listtext	\uc0\u8226 	}in the jwt service class add the Claims method to parse the token and get in into the body\
{\listtext	\uc0\u8226 	}and the extra the parsed token 
\fs30 (
\fs24 eg: extract claims
\fs30 )\
\ls2\ilvl0
\fs24 {\listtext	\uc0\u8226 	}automatically generates token \
{\listtext	\uc0\u8226 	}generate token based on UserDetails\expnd0\expndtw0\kerning0
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0

\f0\b \cf0 Jwt service
\f1\b0  is the validation part \

\f0\b JwtAuthenticationFilter
\f1\b0  is used to authenticate the user details given by the user\

\f0\b JwtService
\f1\b0  is for the creation of token, valid till (validation) stuffs\

\f0\b ApplicationConfig
\f1\b0  is for configuring the fetching and validation of user credentials\

\f0\b SecurityConfiguration
\f1\b0  is for binding all the features of the authentication and configuration\
\
csrf() - token\
Whitelisting \
\
\
OIDC \
Google : console.developers.google.com\
Role based access control in 2 ways\
1. WebSecurityConfigurationAdapter\
2. Controller\
\
\
\
\
UserDetailService is responsible for loading the userDetails from the database\
PasswordEncoder encodes and verifies the passwords\
}